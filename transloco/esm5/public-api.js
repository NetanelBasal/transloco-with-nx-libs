/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export { translate, TranslocoService } from './lib/transloco.service';
export { TranslocoDirective } from './lib/transloco.directive';
export { TranslocoPipe } from './lib/transloco.pipe';
export { TranslocoModule, defaultProviders } from './lib/transloco.module';
export { TRANSLOCO_LOADER } from './lib/transloco.loader';
export { TRANSLOCO_CONFIG, defaultConfig } from './lib/transloco.config';
export { TRANSLOCO_TRANSPILER, DefaultTranspiler } from './lib/transloco.transpiler';
export { TRANSLOCO_SCOPE } from './lib/transloco-scope';
export { TRANSLOCO_LOADING_TEMPLATE } from './lib/transloco-loading-template';
export { TRANSLOCO_LANG } from './lib/transloco-lang';
export { TestingLoader, TranslocoTestingModule } from './lib/transloco-testing.module';
export { TemplateHandler } from './lib/template-handler';
export { TRANSLOCO_INTERCEPTOR } from './lib/transloco.interceptor';
export { TRANSLOCO_FALLBACK_STRATEGY, DefaultFallbackStrategy } from './lib/transloco-fallback-strategy';
export { TRANSLOCO_MISSING_HANDLER } from './lib/transloco-missing-handler';
export { getBrowserCultureLang, getBrowserLang } from './lib/browser-lang';
export {} from './lib/types';
export { getValue, setValue, size, isEmpty, isFunction, isString, isNumber, isObject, coerceArray, toCamelCase, isBrowser, isNil, isDefined, toNumber, isScopeObject, hasInlineLoader, unflatten, flatten } from './lib/helpers';
export { getPipeValue } from './lib/shared';
export { getLangFromScope } from './lib/shared';
export { getScopeFromLang } from './lib/shared';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljLWFwaS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdHJhbnNsb2NvLyIsInNvdXJjZXMiOlsicHVibGljLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDM0UsT0FBTyxFQUFFLGdCQUFnQixFQUFtQixNQUFNLHdCQUF3QixDQUFDO0FBQzNFLE9BQU8sRUFBbUIsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDMUYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGlCQUFpQixFQUF1QixNQUFNLDRCQUE0QixDQUFDO0FBRTFHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxlQUFlLEVBQVEsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUscUJBQXFCLEVBQXdCLE1BQU0sNkJBQTZCLENBQUM7QUFDMUYsT0FBTyxFQUNMLDJCQUEyQixFQUUzQix1QkFBdUIsRUFDeEIsTUFBTSxtQ0FBbUMsQ0FBQztBQUMzQyxPQUFPLEVBQUUseUJBQXlCLEVBQTJCLE1BQU0saUNBQWlDLENBQUM7QUFDckcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNFLGVBQWMsYUFBYSxDQUFDO0FBQzVCLGlOQUFjLGVBQWUsQ0FBQztBQUU5QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzVDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyB0cmFuc2xhdGUsIFRyYW5zbG9jb1NlcnZpY2UgfSBmcm9tICcuL2xpYi90cmFuc2xvY28uc2VydmljZSc7XG5leHBvcnQgeyBUcmFuc2xvY29EaXJlY3RpdmUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28uZGlyZWN0aXZlJztcbmV4cG9ydCB7IFRyYW5zbG9jb1BpcGUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28ucGlwZSc7XG5leHBvcnQgeyBUcmFuc2xvY29Nb2R1bGUsIGRlZmF1bHRQcm92aWRlcnMgfSBmcm9tICcuL2xpYi90cmFuc2xvY28ubW9kdWxlJztcbmV4cG9ydCB7IFRSQU5TTE9DT19MT0FERVIsIFRyYW5zbG9jb0xvYWRlciB9IGZyb20gJy4vbGliL3RyYW5zbG9jby5sb2FkZXInO1xuZXhwb3J0IHsgVHJhbnNsb2NvQ29uZmlnLCBUUkFOU0xPQ09fQ09ORklHLCBkZWZhdWx0Q29uZmlnIH0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLmNvbmZpZyc7XG5leHBvcnQgeyBUUkFOU0xPQ09fVFJBTlNQSUxFUiwgRGVmYXVsdFRyYW5zcGlsZXIsIFRyYW5zbG9jb1RyYW5zcGlsZXIgfSBmcm9tICcuL2xpYi90cmFuc2xvY28udHJhbnNwaWxlcic7XG5leHBvcnQgeyBUcmFuc2xhdGlvbiwgRmFpbGVkRXZlbnQsIEhhc2hNYXAsIExvYWRlZEV2ZW50LCBUcmFuc2xvY29FdmVudHMgfSBmcm9tICcuL2xpYi90eXBlcyc7XG5leHBvcnQgeyBUUkFOU0xPQ09fU0NPUEUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28tc2NvcGUnO1xuZXhwb3J0IHsgVFJBTlNMT0NPX0xPQURJTkdfVEVNUExBVEUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28tbG9hZGluZy10ZW1wbGF0ZSc7XG5leHBvcnQgeyBUUkFOU0xPQ09fTEFORyB9IGZyb20gJy4vbGliL3RyYW5zbG9jby1sYW5nJztcbmV4cG9ydCB7IFRlc3RpbmdMb2FkZXIsIFRyYW5zbG9jb1Rlc3RpbmdNb2R1bGUgfSBmcm9tICcuL2xpYi90cmFuc2xvY28tdGVzdGluZy5tb2R1bGUnO1xuZXhwb3J0IHsgVGVtcGxhdGVIYW5kbGVyLCBWaWV3IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtaGFuZGxlcic7XG5leHBvcnQgeyBUUkFOU0xPQ09fSU5URVJDRVBUT1IsIFRyYW5zbG9jb0ludGVyY2VwdG9yIH0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLmludGVyY2VwdG9yJztcbmV4cG9ydCB7XG4gIFRSQU5TTE9DT19GQUxMQkFDS19TVFJBVEVHWSxcbiAgVHJhbnNsb2NvRmFsbGJhY2tTdHJhdGVneSxcbiAgRGVmYXVsdEZhbGxiYWNrU3RyYXRlZ3lcbn0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLWZhbGxiYWNrLXN0cmF0ZWd5JztcbmV4cG9ydCB7IFRSQU5TTE9DT19NSVNTSU5HX0hBTkRMRVIsIFRyYW5zbG9jb01pc3NpbmdIYW5kbGVyIH0gZnJvbSAnLi9saWIvdHJhbnNsb2NvLW1pc3NpbmctaGFuZGxlcic7XG5leHBvcnQgeyBnZXRCcm93c2VyQ3VsdHVyZUxhbmcsIGdldEJyb3dzZXJMYW5nIH0gZnJvbSAnLi9saWIvYnJvd3Nlci1sYW5nJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL3R5cGVzJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL2hlbHBlcnMnO1xuZXhwb3J0IHsgUHJvdmlkZXJTY29wZSB9IGZyb20gJy4vbGliL3R5cGVzJztcbmV4cG9ydCB7IGdldFBpcGVWYWx1ZSB9IGZyb20gJy4vbGliL3NoYXJlZCc7XG5leHBvcnQgeyBnZXRMYW5nRnJvbVNjb3BlIH0gZnJvbSAnLi9saWIvc2hhcmVkJztcbmV4cG9ydCB7IGdldFNjb3BlRnJvbUxhbmcgfSBmcm9tICcuL2xpYi9zaGFyZWQnO1xuIl19