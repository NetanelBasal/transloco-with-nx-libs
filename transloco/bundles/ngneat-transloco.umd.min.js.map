{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngneat/transloco/lib/transloco.loader.ts","ng://@ngneat/transloco/lib/helpers.ts","ng://@ngneat/transloco/lib/transloco.transpiler.ts","ng://@ngneat/transloco/lib/transloco.config.ts","ng://@ngneat/transloco/lib/transloco-missing-handler.ts","ng://@ngneat/transloco/lib/transloco.interceptor.ts","ng://@ngneat/transloco/lib/transloco-fallback-strategy.ts","ng://@ngneat/transloco/lib/transloco.service.ts","ng://@ngneat/transloco/lib/shared.ts","ng://@ngneat/transloco/lib/resolve-loader.ts","ng://@ngneat/transloco/lib/get-fallbacks-loaders.ts","ng://@ngneat/transloco/lib/merge-config.ts","ng://@ngneat/transloco/lib/loader-component.component.ts","ng://@ngneat/transloco/lib/template-handler.ts","ng://@ngneat/transloco/lib/transloco-lang.ts","ng://@ngneat/transloco/lib/transloco-loading-template.ts","ng://@ngneat/transloco/lib/transloco-scope.ts","ng://@ngneat/transloco/lib/lang-resolver.ts","ng://@ngneat/transloco/lib/scope-resolver.ts","ng://@ngneat/transloco/lib/transloco.directive.ts","ng://@ngneat/transloco/lib/transloco.pipe.ts","ng://@ngneat/transloco/lib/transloco.module.ts","ng://@ngneat/transloco/lib/transloco-testing.module.ts","ng://@ngneat/transloco/lib/browser-lang.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","DefaultLoader","getTranslation","lang","of","translations","get","TRANSLOCO_LOADER","InjectionToken","getValue","obj","path","split","reduce","c","setValue","prop","val","lastIndex","acc","part","index","Array","isArray","slice","size","collection","isObject","keys","isFunction","isString","isNumber","item","toCamelCase","str","replace","word","toLowerCase","toUpperCase","isBrowser","window","isNil","undefined","isDefined","isScopeObject","scope","hasInlineLoader","loader","unflatten","flat","safe","flatten","TRANSLOCO_TRANSPILER","DefaultTranspiler","transpile","params","translation","_this","_","match","trim","forEach","v","getParams","transpiled","TRANSLOCO_CONFIG","providedIn","factory","defaultConfig","defaultLang","reRenderOnLangChange","prodMode","failedRetries","availableLangs","missingHandler","useFallbackTranslation","allowEmpty","aot","TRANSLOCO_MISSING_HANDLER","DefaultHandler","handle","key","config","msg","console","warn","TRANSLOCO_INTERCEPTOR","DefaultInterceptor","preSaveTranslation","preSaveTranslationKey","service","TRANSLOCO_FALLBACK_STRATEGY","DefaultFallbackStrategy","getNextLangs","failedLang","fallbackLang","userConfig","Error","Inject","args","getScopeFromLang","pop","join","getLangFromScope","getPipeValue","char","splitted","lastItem","toString","shouldListenToLangChanges","listenOrNotOperator","listenToLangChange","source","take","prependScope","inlineLoader","resolveLoader","mainLoader","then","res","default","TranslocoService","defineProperty","mergedConfig","getDefaultLang","setDefaultLang","getActiveLang","setActiveLang","setAvailableLangs","langs","getAvailableLangs","load","options","cache","has","loadTranslation","fallback","_isLangScoped","firstFallbackLang","loaders","getFallbacksLoaders","mainPath","fallbackPath","map","from","pipe","forkJoin","load$","retry","catchError","handleFailure","tap","handleSuccess","set","shareReplay","translate","resolveLang","langFromScope","hasLang","_isLang","getMappedScope","k","parser","handleMissingKey","selectTranslate","_isObject","translateObject","langOrScope","_completeScopeWithLang","langChanges$","switchMap","selectTranslateObject","selectTranslation","language","setTranslation","mergedOptions","merge","emitChange","flattenScopeOrTranslation","_a","currentLang","mergedTranslation","withHook","interceptor","flattenTranslation","setTranslationKey","newValue","isResolvedMissingOnce","value_1","getAvailableLangsIds","indexOf","_loadDependencies","mainLang","isLoadedTranslation","combineLatest","_setScopeAlias","alias","scopeMapping","l","id","failedLangs","events","wasFailure","type","payload","failedCounter","delete","add","nextLang","fallbackLangs","fallbackStrategy","isFallbackLang","setFallbackLangForMissingTranslation","ngOnDestroy","subscription","unsubscribe","Injectable","Optional","Map","Subject","events$","asObservable","Set","mergeConfig","BehaviorSubject","subscribe","TranslocoLoaderComponent","Component","template","Input","TemplateHandler","attachView","view","TemplateRef","vcr","createEmbeddedView","componentRef","createComponent","instance","html","hostView","detectChanges","detachView","clear","cmp","injector","ComponentFactoryResolver","resolveComponentFactory","TRANSLOCO_LANG","TRANSLOCO_LOADING_TEMPLATE","TRANSLOCO_SCOPE","LangResolver","resolve","_b","inline","provider","active","initialized","_c","_d","resolveLangBasedOnScope","resolveLangPath","ScopeResolver","translocoService","TranslocoDirective","ngOnInit","loadingTpl","getLoadingTpl","loaderTplHandler","providerLang","inlineLang","activeLang","langResolver","scopeResolver","inlineScope","providerScope","tpl","simpleStrategy","structuralStrategy","inlineRead","cdr","markForCheck","ngOnChanges","changes","some","firstChange","detachLoader","host","nativeElement","innerText","read","translationMemo","context","getTranslateFn","$implicit","withRead","withParams","JSON","stringify","inlineTpl","providedLoadingTpl","Directive","selector","decorators","ViewContainerRef","ChangeDetectorRef","ElementRef","TranslocoPipe","transform","keyName","lastKey","updateValue","lastValue","Pipe","name","pure","defaultProviders","provide","useClass","deps","TranslocoModule","NgModule","declarations","providers","exports","entryComponents","TestingLoader","TranslocoTestingModule","withLangs","ngModule","useValue","getBrowserCultureLang","navigator","browserCultureLang","languages","browserLanguage","userLanguage","getBrowserLang","browserLang","isEmpty","coerceArray","toNumber","isNaN","Number","parseFloat"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Translation } from './types';\n\nexport interface TranslocoLoader {\n  getTranslation(lang: string): Observable<Translation> | Promise<Translation>;\n}\n\nexport class DefaultLoader implements TranslocoLoader {\n  constructor(private translations: Map<string, Translation>) {}\n\n  getTranslation(lang: string): Observable<Translation> {\n    return of(this.translations.get(lang) || {});\n  }\n}\n\nexport const TRANSLOCO_LOADER = new InjectionToken<Translation>('TRANSLOCO_LOADER');\n","import { ProviderScope, Translation } from './types';\nimport flat from 'flat';\n\nexport function getValue(obj: object, path: string) {\n  /* For cases where the key is like: 'general.something.thing' */\n  if(obj && obj.hasOwnProperty(path)) {\n    return obj[path];\n  }\n  return path.split('.').reduce((p, c) => p && p[c], obj);\n}\n\nexport function setValue(obj: any, prop: string, val: any) {\n  obj = { ...obj };\n\n  const split = prop.split('.');\n  const lastIndex = split.length - 1;\n\n  split.reduce((acc, part, index) => {\n    if(index === lastIndex) {\n      acc[part] = val;\n    } else {\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n}\n\nexport function size(collection) {\n  if(!collection) {\n    return 0;\n  }\n\n  if(Array.isArray(collection)) {\n    return collection.length;\n  }\n\n  if(isObject(collection)) {\n    return Object.keys(collection).length;\n  }\n\n  return !!collection ? collection.length : 0;\n}\n\nexport function isEmpty(collection) {\n  return size(collection) === 0;\n}\n\nexport function isFunction(val: any): val is Function {\n  return typeof val === 'function';\n}\n\nexport function isString(val: any): val is string {\n  return typeof val === 'string';\n}\n\nexport function isNumber(val: any): val is number {\n  return typeof val === 'number';\n}\n\nexport function isObject(item): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function coerceArray(val) {\n  return Array.isArray(val) ? val : [val];\n}\n\n/*\n * @example\n *\n * given: path-to-happiness => pathToHappiness\n * given: path_to_happiness => pathToHappiness\n * given: path-to_happiness => pathToHappiness\n *\n */\nexport function toCamelCase(str: string): string {\n  return str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => (index == 0 ? word.toLowerCase() : word.toUpperCase()))\n    .replace(/\\s+|_|-|\\//g, '');\n}\n\nexport function isBrowser() {\n  return typeof window !== 'undefined';\n}\n\nexport function isNil(value: any) {\n  return value === null || value === undefined;\n}\n\nexport function isDefined(value: any) {\n  return isNil(value) === false;\n}\n\nexport function toNumber(value: number | string): number | null {\n  if(isNumber(value)) return value;\n\n  if(isString(value) && !isNaN(Number(value) - parseFloat(value))) {\n    return Number(value);\n  }\n\n  return null;\n}\n\nexport function isScopeObject(item: any): item is ProviderScope {\n  return item && typeof item.scope === 'string';\n}\n\nexport function hasInlineLoader(item: any): item is ProviderScope {\n  return item && isObject(item.loader);\n}\n\nexport function unflatten(obj: Translation): Translation {\n  return flat.unflatten(obj, { safe: true });\n}\n\nexport function flatten(obj: Translation): Translation {\n  return flat(obj, { safe: true });\n}\n","import { InjectionToken } from '@angular/core';\nimport { HashMap, Translation } from './types';\nimport { getValue, isString, isObject, setValue, isDefined } from './helpers';\n\nexport const TRANSLOCO_TRANSPILER = new InjectionToken('TRANSLOCO_TRANSPILER');\n\nexport interface TranslocoTranspiler {\n  transpile(value: any, params: HashMap<any>, translation: HashMap): any;\n}\n\nexport class DefaultTranspiler implements TranslocoTranspiler {\n  transpile(value: any, params: HashMap<any> = {}, translation: Translation): any {\n    if (isString(value)) {\n      return value.replace(/{{(.*?)}}/g, function(_, match) {\n        match = match.trim();\n        if (isDefined(params[match])) {\n          return params[match];\n        }\n\n        return isDefined(translation[match]) ? translation[match] : '';\n      });\n    }\n\n    if (isObject(value) && params) {\n      /**\n       *\n       * @example\n       *\n       * const en = {\n       *  a: {\n       *    b: {\n       *      c: \"Hello {{ value }}\"\n       *    }\n       *  }\n       * }\n       *\n       * const params =  {\n       *  \"b.c\": { value: \"Transloco \"}\n       * }\n       *\n       * service.selectTranslate('a', params);\n       *\n       * // the first param will be the result of `en.a`.\n       * // the second param will be `params`.\n       * parser.transpile(value, params, {});\n       *\n       *\n       */\n      Object.keys(params).forEach(p => {\n        // get the value of \"b.c\" inside \"a\" => \"Hello {{ value }}\"\n        const v = getValue(value, p);\n        // get the params of \"b.c\" => { value: \"Transloco\" }\n        const getParams = getValue(params, p);\n\n        // transpile the value => \"Hello Transloco\"\n        const transpiled = this.transpile(v, getParams, translation);\n\n        // set \"b.c\" to `transpiled`\n        value = setValue(value, p, transpiled);\n      });\n    }\n\n    return value;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { AvailableLangs, HashMap } from './types';\n\nexport type TranslocoConfig = {\n  defaultLang: string;\n  reRenderOnLangChange?: boolean;\n  prodMode?: boolean;\n  fallbackLang?: string | string[];\n  failedRetries?: number;\n  scopeMapping?: HashMap<string>;\n  availableLangs?: AvailableLangs;\n  flatten?: {\n    aot?: boolean;\n  };\n  missingHandler?: {\n    useFallbackTranslation?: boolean;\n    allowEmpty?: boolean;\n  };\n};\n\nexport const TRANSLOCO_CONFIG = new InjectionToken('TRANSLOCO_CONFIG', {\n  providedIn: 'root',\n  factory: () => {\n    return {};\n  }\n});\n\nexport const defaultConfig: TranslocoConfig = {\n  defaultLang: 'en',\n  reRenderOnLangChange: false,\n  prodMode: false,\n  failedRetries: 2,\n  availableLangs: [],\n  missingHandler: {\n    useFallbackTranslation: false,\n    allowEmpty: false\n  },\n  flatten: {\n    aot: false\n  }\n};\n","import { InjectionToken } from '@angular/core';\nimport { TranslocoConfig } from './transloco.config';\n\nexport const TRANSLOCO_MISSING_HANDLER = new InjectionToken('TRANSLOCO_MISSING_HANDLER');\n\nexport interface TranslocoMissingHandler {\n  handle(key: string, config: TranslocoConfig): any;\n}\n\nexport class DefaultHandler implements TranslocoMissingHandler {\n  handle(key: string, config: TranslocoConfig) {\n    if (!config.prodMode) {\n      const msg = `Missing translation for '${key}'`;\n      console.warn(`%c ${msg}`, 'font-size: 12px; color: red');\n    }\n\n    return key;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Translation } from './types';\n\nexport const TRANSLOCO_INTERCEPTOR = new InjectionToken('TRANSLOCO_INTERCEPTOR');\n\nexport interface TranslocoInterceptor {\n  preSaveTranslation(translation: Translation, lang: string): Translation;\n\n  preSaveTranslationKey(key: string, value: string, lang: string): string;\n}\n\nexport class DefaultInterceptor implements TranslocoInterceptor {\n  preSaveTranslation(translation: Translation, lang: string): Translation {\n    return translation;\n  }\n\n  preSaveTranslationKey(key: string, value: string, lang: string): string {\n    return value;\n  }\n}\n","import { Inject, InjectionToken } from '@angular/core';\nimport { TRANSLOCO_CONFIG, TranslocoConfig } from './transloco.config';\n\nexport const TRANSLOCO_FALLBACK_STRATEGY = new InjectionToken<TranslocoFallbackStrategy>('TRANSLOCO_FALLBACK_STRATEGY');\n\nexport interface TranslocoFallbackStrategy {\n  getNextLangs(failedLang: string): string[];\n}\n\nexport class DefaultFallbackStrategy implements TranslocoFallbackStrategy {\n  constructor(@Inject(TRANSLOCO_CONFIG) private userConfig: TranslocoConfig) {}\n\n  getNextLangs(failedLang: string) {\n    const fallbackLang = this.userConfig.fallbackLang;\n    if (!fallbackLang) {\n      throw new Error('When using the default fallback, a fallback language must be provided in the config!');\n    }\n\n    return Array.isArray(fallbackLang) ? fallbackLang : [fallbackLang];\n  }\n}\n","import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { BehaviorSubject, combineLatest, forkJoin, from, Observable, of, Subject, Subscription } from 'rxjs';\nimport { catchError, map, retry, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { DefaultLoader, TRANSLOCO_LOADER, TranslocoLoader } from './transloco.loader';\nimport { TRANSLOCO_TRANSPILER, TranslocoTranspiler } from './transloco.transpiler';\nimport { AvailableLangs, HashMap, InlineLoader, LoadOptions, SetTranslationOptions, TranslateParams, Translation, TranslocoEvents } from './types';\nimport { flatten, getValue, isString, size, toCamelCase, unflatten } from './helpers';\nimport { defaultConfig, TRANSLOCO_CONFIG, TranslocoConfig } from './transloco.config';\nimport { TRANSLOCO_MISSING_HANDLER, TranslocoMissingHandler } from './transloco-missing-handler';\nimport { TRANSLOCO_INTERCEPTOR, TranslocoInterceptor } from './transloco.interceptor';\nimport { TRANSLOCO_FALLBACK_STRATEGY, TranslocoFallbackStrategy } from './transloco-fallback-strategy';\nimport { mergeConfig } from './merge-config';\nimport { getLangFromScope, getScopeFromLang } from './shared';\nimport { getFallbacksLoaders } from './get-fallbacks-loaders';\nimport { resolveLoader } from './resolve-loader';\n\nlet service: TranslocoService;\n\nexport function translate<T = any>(key: TranslateParams, params: HashMap = {}, lang?: string): T {\n  return service.translate(key, params, lang);\n}\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoService implements OnDestroy {\n  private subscription: Subscription;\n  private translations = new Map<string, Translation>();\n  private cache = new Map<string, Observable<Translation>>();\n  private firstFallbackLang: string | null = null;\n  private defaultLang: string;\n  private mergedConfig: TranslocoConfig;\n  private availableLangs: AvailableLangs = [];\n  private isResolvedMissingOnce = false;\n  private lang: BehaviorSubject<string>;\n  langChanges$: Observable<string>;\n\n  private events = new Subject<TranslocoEvents>();\n  events$ = this.events.asObservable();\n\n  private failedCounter = 0;\n  private failedLangs = new Set<string>();\n\n  constructor(\n    @Optional() @Inject(TRANSLOCO_LOADER) private loader: TranslocoLoader,\n    @Inject(TRANSLOCO_TRANSPILER) private parser: TranslocoTranspiler,\n    @Inject(TRANSLOCO_MISSING_HANDLER) private missingHandler: TranslocoMissingHandler,\n    @Inject(TRANSLOCO_INTERCEPTOR) private interceptor: TranslocoInterceptor,\n    @Inject(TRANSLOCO_CONFIG) private userConfig: TranslocoConfig,\n    @Inject(TRANSLOCO_FALLBACK_STRATEGY) private fallbackStrategy: TranslocoFallbackStrategy\n  ) {\n    if(!this.loader) {\n      this.loader = new DefaultLoader(this.translations);\n    }\n    service = this;\n    this.mergedConfig = mergeConfig(defaultConfig, userConfig);\n\n    this.setAvailableLangs(this.mergedConfig.availableLangs);\n    this.setFallbackLangForMissingTranslation(this.mergedConfig);\n    this.setDefaultLang(this.mergedConfig.defaultLang);\n    this.lang = new BehaviorSubject<string>(this.getDefaultLang());\n    // Don't use distinctUntilChanged as we need the ability to update\n    // the value when using setTranslation or setTranslationKeys\n    this.langChanges$ = this.lang.asObservable();\n\n    /**\n     * When we have a failure, we want to define the next language that succeeded as the active\n     */\n    this.subscription = this.events$.subscribe(e => {\n      if(e.type === 'translationLoadSuccess' && e.wasFailure) {\n        // Handle scoped lang\n        const lang = getLangFromScope(e.payload.lang);\n        this.setActiveLang(lang);\n      }\n    });\n  }\n\n  get config(): TranslocoConfig {\n    return this.mergedConfig;\n  }\n\n  getDefaultLang() {\n    return this.defaultLang;\n  }\n\n  setDefaultLang(lang: string) {\n    this.defaultLang = lang;\n  }\n\n  getActiveLang() {\n    return this.lang.getValue();\n  }\n\n  setActiveLang(lang: string) {\n    this.lang.next(lang);\n    return this;\n  }\n\n  setAvailableLangs(langs: AvailableLangs) {\n    this.availableLangs = langs;\n  }\n\n  getAvailableLangs() {\n    return this.availableLangs;\n  }\n\n  load(path: string, options: LoadOptions = {}): Observable<Translation> {\n    if(this.cache.has(path) === false) {\n      let loadTranslation: Observable<Translation | { translation: Translation; lang: string }[]>;\n\n      if(this.useFallbackTranslation(path)) {\n        // if the path is scope the fallback should be `scope/fallbackLang`;\n        const fallback = this._isLangScoped(path)\n          ? `${getScopeFromLang(path)}/${this.firstFallbackLang}`\n          : this.firstFallbackLang;\n\n        const loaders = getFallbacksLoaders(path, fallback, this.loader, options.inlineLoader);\n        loadTranslation = forkJoin(loaders);\n      } else {\n        const loader = resolveLoader(path, this.loader, options.inlineLoader);\n        loadTranslation = from(loader);\n      }\n\n      const load$ = loadTranslation.pipe(\n        retry(this.config.failedRetries),\n        catchError(() => this.handleFailure(path, options)),\n        tap(translation => {\n          if(Array.isArray(translation)) {\n            translation.forEach(t => {\n              this.handleSuccess(t.lang, t.translation);\n              // Save the fallback in cache so we'll not create a redundant request\n              if(t.lang !== path) {\n                this.cache.set(t.lang, of({}));\n              }\n            });\n            return;\n          }\n          this.handleSuccess(path, translation);\n        }),\n        shareReplay(1)\n      );\n\n      this.cache.set(path, load$);\n    }\n\n    return this.cache.get(path);\n  }\n\n  /**\n   * Gets the instant translated value of a key\n   *\n   * @example\n   *\n   * translate<string>('hello')\n   * translate('hello', { value: 'value' })\n   * translate<string[]>(['hello', 'key'])\n   * translate('hello', { }, 'en')\n   * translate('scope.someKey', { }, 'en')\n   */\n  translate<T = any>(key: TranslateParams, params: HashMap = {}, lang = this.getActiveLang()): T {\n    let resolveLang = lang;\n    let scope;\n\n    // If lang is scope we need to check the following cases:\n    // todos/es => in this case we should take `es` as lang\n    // todos => in this case we should set the active lang as lang\n    if(this._isLangScoped(lang)) {\n      // en for example\n      const langFromScope = getLangFromScope(lang);\n      // en is lang\n      const hasLang = this._isLang(langFromScope);\n      // take en\n      resolveLang = hasLang ? langFromScope : this.getActiveLang();\n      // find the scope\n      scope = this.getMappedScope(hasLang ? getScopeFromLang(lang) : lang);\n    }\n\n    if(Array.isArray(key)) {\n      return key.map(k => this.translate(scope ? `${scope}.${k}` : k, params, resolveLang)) as any;\n    }\n\n    key = scope ? `${scope}.${key}` : key;\n\n    if(!key) {\n      return this.missingHandler.handle(key, this.config);\n    }\n\n    const translation = this.getTranslation(resolveLang);\n    const value = translation[key];\n\n    if(!value) {\n      return this.handleMissingKey(key, value, params);\n    }\n\n    return this.parser.transpile(value, params, translation);\n  }\n\n  /**\n   * Gets the translated value of a key as observable\n   *\n   * @example\n   *\n   * selectTranslate<string>('hello').subscribe(value => ...)\n   * selectTranslate<string>('hello', {}, 'es').subscribe(value => ...)\n   * selectTranslate<string>('hello', {}, 'todos').subscribe(value => ...)\n   *\n   */\n  selectTranslate<T = any>(key: TranslateParams, params?: HashMap, lang?: string, _isObject = false): Observable<T> {\n    const load = lang =>\n      this.load(lang).pipe(\n        map(() => (_isObject ? this.translateObject(key, params, lang) : this.translate(key, params, lang)))\n      );\n    if(isString(lang)) {\n      const langOrScope = this._completeScopeWithLang(lang);\n      return load(langOrScope);\n    } else {\n      // if the user doesn't pass lang, we need to listen to lang changes and update the value accordingly\n      return this.langChanges$.pipe(switchMap(lang => load(lang)));\n    }\n  }\n\n  /**\n   * Translate the given path that returns an object\n   *\n   * @example\n   *\n   * service.translateObject('path.to.object', {'subpath': { value: 'someValue'}}) => returns translated object\n   *\n   */\n  translateObject<T = any>(key: TranslateParams, params?: HashMap, lang = this.getActiveLang()): T {\n    if(Array.isArray(key)) {\n      return key.map(k => this.translateObject(k, params, lang)) as any;\n    }\n\n    const translation = this.getTranslation(lang);\n    // TODO: optimize it (we can build this specific object)\n    const value = getValue(unflatten(translation), key);\n    return this.parser.transpile(value, params, translation);\n  }\n\n  selectTranslateObject<T = any>(key: TranslateParams, params?: HashMap, lang?: string): Observable<T> {\n    return this.selectTranslate(key, params, lang, true);\n  }\n\n  /**\n   * Gets an object of translations for a given language\n   *\n   * @example\n   *\n   * getTranslation()\n   * getTranslation('en')\n   * getTranslation('admin-page/en')\n   */\n  getTranslation(): Map<string, Translation>;\n  getTranslation(lang: string): Translation;\n  getTranslation(lang?: string): Map<string, Translation> | Translation {\n    return lang ? this.translations.get(lang) || {} : this.translations;\n  }\n\n  /**\n   * Gets an object of translations for a given language\n   *\n   * @example\n   *\n   * selectTranslation().subscribe()\n   * selectTranslation('es').subscribe()\n   */\n  selectTranslation(lang?: string): Observable<Translation> {\n    const language = lang || this.getActiveLang();\n    return this.load(language).pipe(map(() => this.getTranslation(language)));\n  }\n\n  /**\n   * Sets or merge a given translation object to current lang\n   *\n   * @example\n   *\n   * setTranslation({ ... })\n   * setTranslation({ ... }, 'en')\n   * setTranslation({ ... }, 'es', { merge: false } )\n   * setTranslation({ ... }, 'todos/en', { merge: false } )\n   */\n  setTranslation(translation: Translation, lang = this.getActiveLang(), options: SetTranslationOptions = {}) {\n    const defaults = { merge: true, emitChange: true };\n    const mergedOptions = { ...defaults, ...options };\n    const scope = getScopeFromLang(lang);\n\n    /**\n     * If this isn't a scope we use the whole translation as is\n     * otherwise we need to flat the scope and use it\n     */\n    let flattenScopeOrTranslation = translation;\n\n    // Merged the scoped language into the active language\n    if(scope) {\n      const key = this.getMappedScope(scope);\n      flattenScopeOrTranslation = flatten({ [key]: translation });\n    }\n\n    const currentLang = scope ? getLangFromScope(lang) : lang;\n\n    const mergedTranslation = {\n      ...(mergedOptions.merge && this.getTranslation(currentLang)),\n      ...flattenScopeOrTranslation\n    };\n\n    const withHook = this.interceptor.preSaveTranslation(mergedTranslation, currentLang);\n    const flattenTranslation = this.mergedConfig.flatten.aot ? withHook : flatten(withHook);\n\n    this.translations.set(currentLang, flattenTranslation);\n    mergedOptions.emitChange && this.setActiveLang(this.getActiveLang());\n  }\n\n  /**\n   * Sets translation key with given value\n   *\n   * @example\n   *\n   * setTranslationKey('key', 'value')\n   * setTranslationKey('key.nested', 'value')\n   * setTranslationKey('key.nested', 'value', 'en')\n   */\n  setTranslationKey(key: string, value: string, lang = this.getActiveLang()) {\n    const withHook = this.interceptor.preSaveTranslationKey(key, value, lang);\n    const newValue = {\n      ...this.getTranslation(lang),\n      [key]: withHook\n    };\n    this.setTranslation(newValue, lang);\n  }\n\n  handleMissingKey(key: string, value: any, params?: HashMap) {\n    if(this.config.missingHandler.allowEmpty && value === '') {\n      return '';\n    }\n\n    if(this.useFallbackTranslation() && !this.isResolvedMissingOnce) {\n      this.isResolvedMissingOnce = true;\n      const value = this.translate(key, params, this.firstFallbackLang);\n      this.isResolvedMissingOnce = false;\n      return value;\n    }\n\n    return this.missingHandler.handle(key, this.config);\n  }\n\n  /**\n   * @internal\n   */\n  _isLangScoped(lang: string) {\n    return this.getAvailableLangsIds().indexOf(lang) === -1;\n  }\n\n  /**\n   * @internal\n   */\n  _isLang(lang: string) {\n    return this.getAvailableLangsIds().indexOf(lang) !== -1;\n  }\n\n  /**\n   * @internal\n   *\n   * We always want to make sure the global lang is loaded\n   * before loading the scope since you can access both via the pipe/directive.\n   */\n  _loadDependencies(path: string, inlineLoader?: InlineLoader): Observable<Translation | Translation[]> {\n    const mainLang = getLangFromScope(path);\n\n    if(this._isLangScoped(path) && !this.isLoadedTranslation(mainLang)) {\n      return combineLatest(this.load(mainLang), this.load(path, { inlineLoader }));\n    }\n\n    return this.load(path, { inlineLoader });\n  }\n\n  private isLoadedTranslation(lang: string) {\n    return size(this.getTranslation(lang));\n  }\n\n  /**\n   * @internal\n   */\n  _completeScopeWithLang(langOrScope: string) {\n    if(this._isLangScoped(langOrScope) && !this._isLang(getLangFromScope(langOrScope))) {\n      return `${langOrScope}/${this.getActiveLang()}`;\n    }\n    return langOrScope;\n  }\n\n  /**\n   * @internal\n   */\n  _setScopeAlias(scope: string, alias: string) {\n    if(!this.mergedConfig.scopeMapping) {\n      this.mergedConfig.scopeMapping = {};\n    }\n    this.mergedConfig.scopeMapping[scope] = alias;\n  }\n\n  private getAvailableLangsIds(): string[] {\n    const first = this.getAvailableLangs()[0];\n\n    if(isString(first)) {\n      return this.getAvailableLangs() as string[];\n    }\n\n    return (this.getAvailableLangs() as { id: string }[]).map(l => l.id);\n  }\n\n  private useFallbackTranslation(lang?: string) {\n    return this.config.missingHandler.useFallbackTranslation && lang !== this.firstFallbackLang;\n  }\n\n  private handleSuccess(lang: string, translation: Translation) {\n    this.setTranslation(translation, lang, { emitChange: false });\n    if(this.failedLangs.has(lang) === false) {\n      this.events.next({\n        wasFailure: !!this.failedLangs.size,\n        type: 'translationLoadSuccess',\n        payload: {\n          lang\n        }\n      });\n\n      this.failedCounter = 0;\n    } else {\n      this.cache.delete(lang);\n      this.failedLangs.delete(lang);\n    }\n  }\n\n  private handleFailure(lang: string, mergedOptions) {\n    const splitted = lang.split('/');\n\n    this.failedLangs.add(lang);\n    const fallbacks = mergedOptions.fallbackLangs || this.fallbackStrategy.getNextLangs(lang);\n    const nextLang = fallbacks[this.failedCounter];\n\n    const isFallbackLang = nextLang === splitted[splitted.length - 1];\n\n    if(!nextLang || isFallbackLang) {\n      let msg = `Unable to load translation and all the fallback languages`;\n      if(splitted.length > 1) {\n        msg += `, did you misspelled the scope name?`;\n      }\n\n      throw new Error(msg);\n    }\n\n    let resolveLang = nextLang;\n    // if it's scoped lang\n    if(splitted.length > 1) {\n      // We need to resolve it to:\n      // todos/langNotExists => todos/nextLang\n      splitted[splitted.length - 1] = nextLang;\n      resolveLang = splitted.join('/');\n    }\n\n    this.failedCounter++;\n    this.events.next({\n      type: 'translationLoadFailure',\n      payload: {\n        lang\n      }\n    });\n\n    return this.load(resolveLang);\n  }\n\n  private setFallbackLangForMissingTranslation({ fallbackLang }: TranslocoConfig): void {\n    if(this.useFallbackTranslation && fallbackLang) {\n      this.firstFallbackLang = Array.isArray(fallbackLang) ? fallbackLang[0] : fallbackLang;\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  private getMappedScope(scope: string): string {\n    const { scopeMapping = {} } = this.config;\n    return scopeMapping[scope] || toCamelCase(scope);\n  }\n}\n","import { TranslocoService } from './transloco.service';\nimport { isString } from './helpers';\nimport { take } from 'rxjs/operators';\n\n/*\n * @example\n *\n * given: lazy-page/en => lazy-page\n *\n */\nexport function getScopeFromLang(lang: string): string {\n  if (!lang) {\n    return '';\n  }\n  const split = lang.split('/');\n  split.pop();\n  return split.join('/');\n}\n\n/*\n * @example\n *\n * given: lazy-page/en => en\n *\n */\nexport function getLangFromScope(lang: string): string {\n  if (!lang) {\n    return '';\n  }\n  const split = lang.split('/');\n  return split.pop();\n}\n\n/**\n * @example\n *\n * getPipeValue('todos|scoped', 'scoped') [true, 'todos']\n * getPipeValue('en|static', 'static') [true, 'en']\n * getPipeValue('en', 'static') [false, 'en']\n */\nexport function getPipeValue(str: string, value: string, char = '|'): [boolean, string] {\n  if (isString(str)) {\n    const splitted = str.split(char);\n    const lastItem = splitted.pop();\n    return lastItem === value ? [true, splitted.toString()] : [false, lastItem];\n  }\n\n  return [false, ''];\n}\n\nexport function shouldListenToLangChanges(service: TranslocoService, lang: string) {\n  const [hasStatic] = getPipeValue(lang, 'static');\n  if (hasStatic === false) {\n    // If we didn't get 'lang|static' check if it's set in the global level\n    return service.config.reRenderOnLangChange;\n  }\n\n  // We have 'lang|static' so don't listen to lang changes\n  return false;\n}\n\nexport function listenOrNotOperator(listenToLangChange: boolean) {\n  return listenToLangChange ? source => source : take(1);\n}\n\nexport function prependScope(inlineLoader, scope) {\n  return Object.keys(inlineLoader).reduce((acc, lang) => {\n    acc[`${scope}/${lang}`] = inlineLoader[lang];\n    return acc;\n  }, {});\n}\n","import { TranslocoLoader } from './transloco.loader';\nimport { InlineLoader } from './types';\nimport { isFunction } from './helpers';\n\nexport function resolveLoader(path: string, mainLoader: TranslocoLoader, inlineLoader: InlineLoader) {\n  if(inlineLoader) {\n    const pathLoader = inlineLoader[path];\n    if(isFunction(pathLoader) === false) {\n      throw `You're using an inline loader but didn't provide a loader for ${path}`;\n    }\n\n    return inlineLoader[path]().then(res => res.default);\n  }\n\n  return mainLoader.getTranslation(path);\n}\n","import { from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { resolveLoader } from './resolve-loader';\nimport { TranslocoLoader } from './transloco.loader';\nimport { InlineLoader } from './types';\n\nexport function getFallbacksLoaders(mainPath: string, fallbackPath: string, mainLoader: TranslocoLoader, inlineLoader: InlineLoader) {\n  return [mainPath, fallbackPath].map(path => {\n    const loader = resolveLoader(path, mainLoader, inlineLoader);\n\n    return from(loader).pipe(\n      map(translation => ({\n        translation,\n        lang: path\n      }))\n    );\n  });\n}\n","import { TranslocoConfig } from './transloco.config';\n\nexport function mergeConfig(defaultConfig: TranslocoConfig, userConfig: Partial<TranslocoConfig>) {\n  return {\n    ...defaultConfig,\n    ...userConfig,\n    missingHandler: {\n      ...defaultConfig.missingHandler,\n      ...userConfig.missingHandler\n    },\n    flatten: {\n      ...defaultConfig.flatten,\n      ...userConfig.flatten\n    }\n  };\n}\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  template: `\r\n    <div class=\"transloco-loader-template\" [innerHTML]=\"html\"></div>\r\n  `\r\n})\r\nexport class TranslocoLoaderComponent {\r\n  @Input() html: string;\r\n}\r\n","import { ComponentRef, TemplateRef, ViewContainerRef, ComponentFactoryResolver, Injector, Type } from '@angular/core';\r\nimport { isString } from './helpers';\r\nimport { TranslocoLoaderComponent } from './loader-component.component';\r\n\r\nexport type View = string | TemplateRef<any> | Type<any>;\r\n\r\nexport class TemplateHandler {\r\n  private injector: Injector;\r\n\r\n  constructor(private view: View, private vcr: ViewContainerRef) {\r\n    this.injector = this.vcr.injector;\r\n  }\r\n\r\n  attachView() {\r\n    if (this.view instanceof TemplateRef) {\r\n      this.vcr.createEmbeddedView(this.view);\r\n    } else if (isString(this.view)) {\r\n      const componentRef = this.createComponent<TranslocoLoaderComponent>(TranslocoLoaderComponent);\r\n      componentRef.instance.html = this.view;\r\n      componentRef.hostView.detectChanges();\r\n    } else {\r\n      this.createComponent(this.view);\r\n    }\r\n  }\r\n\r\n  detachView() {\r\n    this.vcr.clear();\r\n  }\r\n\r\n  private createComponent<T>(cmp: Type<any>): ComponentRef<T> {\r\n    const cfr = this.injector.get(ComponentFactoryResolver);\r\n    const factory = cfr.resolveComponentFactory(cmp);\r\n\r\n    return this.vcr.createComponent(factory);\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\nexport const TRANSLOCO_LANG = new InjectionToken<string>('TRANSLOCO_LANG');\n","import { InjectionToken, ComponentRef } from '@angular/core';\n\nexport const TRANSLOCO_LOADING_TEMPLATE = new InjectionToken<{ component: ComponentRef<any> | string }>(\n  'TRANSLOCO_LOADING_TEMPLATE'\n);\n","import { InjectionToken } from '@angular/core';\nimport { TranslocoScope } from './types';\n\nexport const TRANSLOCO_SCOPE = new InjectionToken<TranslocoScope>('TRANSLOCO_SCOPE');\n","import { getLangFromScope, getPipeValue, getScopeFromLang } from './shared';\n\ntype LangResolverParams = {\n  inline: string | undefined;\n  provider: string | undefined;\n  active: string | undefined;\n};\n\nexport class LangResolver {\n  initialized = false;\n\n  // inline => provider => active\n  resolve(\n    { inline, provider, active }: LangResolverParams = { inline: undefined, provider: undefined, active: undefined }\n  ) {\n    let lang = active;\n    /**\n     * When the user changes the lang we need to update\n     * the view. Otherwise, the lang will remain the inline/provided lang\n     */\n    if (this.initialized) {\n      lang = active;\n      return lang;\n    }\n\n    if (provider) {\n      const [_, extracted] = getPipeValue(provider, 'static');\n      lang = extracted;\n    }\n\n    if (inline) {\n      const [_, extracted] = getPipeValue(inline, 'static');\n      lang = extracted;\n    }\n\n    this.initialized = true;\n    return lang;\n  }\n\n  /**\n   *\n   * Resolve the lang\n   *\n   * @example\n   *\n   * resolveLangBasedOnScope('todos/en') => en\n   * resolveLangBasedOnScope('en') => en\n   *\n   */\n  resolveLangBasedOnScope(lang: string) {\n    const scope = getScopeFromLang(lang);\n    return scope ? getLangFromScope(lang) : lang;\n  }\n\n  /**\n   *\n   * Resolve the lang path for loading\n   *\n   * @example\n   *\n   * resolveLangPath('todos', 'en') => todos/en\n   * resolveLangPath('en') => en\n   *\n   */\n  resolveLangPath(lang: string, scope: string | undefined) {\n    return scope ? `${scope}/${lang}` : lang;\n  }\n}\n","import { TranslocoScope, ProviderScope } from './types';\nimport { TranslocoService } from './transloco.service';\nimport { isScopeObject, toCamelCase } from './helpers';\n\ntype ScopeResolverParams = {\n  inline: string | undefined;\n  provider: TranslocoScope;\n};\n\nexport class ScopeResolver {\n  constructor(private translocoService: TranslocoService) {}\n\n  // inline => provider\n  resolve({ inline, provider }: ScopeResolverParams = { inline: undefined, provider: undefined }): string {\n    if (inline) {\n      return inline;\n    }\n\n    if (provider) {\n      if (isScopeObject(provider)) {\n        const { scope, alias = toCamelCase(scope) } = provider as ProviderScope;\n        this.translocoService._setScopeAlias(scope, alias);\n        return scope;\n      }\n\n      return provider as string;\n    }\n\n    return undefined;\n  }\n}\n","import { ChangeDetectorRef, Directive, ElementRef, EmbeddedViewRef, Inject, Input, OnChanges, OnDestroy, OnInit, Optional, TemplateRef, Type, ViewContainerRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { TemplateHandler, View } from './template-handler';\nimport { TRANSLOCO_LANG } from './transloco-lang';\nimport { TRANSLOCO_LOADING_TEMPLATE } from './transloco-loading-template';\nimport { TRANSLOCO_SCOPE } from './transloco-scope';\nimport { TranslocoService } from './transloco.service';\nimport { HashMap, InlineLoader, TranslocoScope } from './types';\nimport { listenOrNotOperator, prependScope, shouldListenToLangChanges } from './shared';\nimport { LangResolver } from './lang-resolver';\nimport { ScopeResolver } from './scope-resolver';\nimport { hasInlineLoader } from './helpers';\n\n@Directive({\n  selector: '[transloco]'\n})\nexport class TranslocoDirective implements OnInit, OnDestroy, OnChanges {\n  subscription: Subscription | null;\n  view: EmbeddedViewRef<any>;\n  private translationMemo: { [key: string]: { value: any; params: HashMap } } = {};\n\n  @Input('transloco') key: string;\n  @Input('translocoParams') params: HashMap = {};\n  @Input('translocoScope') inlineScope: string | undefined;\n  @Input('translocoRead') inlineRead: string | undefined;\n  @Input('translocoLang') inlineLang: string | undefined;\n  @Input('translocoLoadingTpl') inlineTpl: TemplateRef<any> | undefined;\n\n  private currentLang: string;\n  private loaderTplHandler: TemplateHandler = null;\n  // Whether we already rendered the view once\n  private initialized = false;\n  private path: string;\n  private langResolver = new LangResolver();\n  private scopeResolver = new ScopeResolver(this.translocoService);\n\n  constructor(\n    private translocoService: TranslocoService,\n    @Optional() private tpl: TemplateRef<{ $implicit: (key: string, params?: HashMap) => any }>,\n    @Optional() @Inject(TRANSLOCO_SCOPE) private providerScope: TranslocoScope,\n    @Optional() @Inject(TRANSLOCO_LANG) private providerLang: string | null,\n    @Optional() @Inject(TRANSLOCO_LOADING_TEMPLATE) private providedLoadingTpl: Type<any> | string,\n    private vcr: ViewContainerRef,\n    private cdr: ChangeDetectorRef,\n    private host: ElementRef\n  ) {\n  }\n\n  ngOnInit() {\n    const loadingTpl = this.getLoadingTpl();\n    if(loadingTpl) {\n      this.loaderTplHandler = new TemplateHandler(loadingTpl, this.vcr);\n      this.loaderTplHandler.attachView();\n    }\n\n    const listenToLangChange = shouldListenToLangChanges(this.translocoService, this.providerLang || this.inlineLang);\n\n    this.subscription = this.translocoService.langChanges$\n      .pipe(\n        switchMap(activeLang => {\n          const lang = this.langResolver.resolve({\n            inline: this.inlineLang,\n            provider: this.providerLang,\n            active: activeLang\n          });\n          const scope = this.scopeResolver.resolve({\n            inline: this.inlineScope,\n            provider: this.providerScope\n          });\n\n          this.path = this.langResolver.resolveLangPath(lang, scope);\n          const inlineLoader: InlineLoader | null = hasInlineLoader(this.providerScope) ? prependScope(this.providerScope.loader, scope) : null;\n\n          return this.translocoService._loadDependencies(this.path, inlineLoader);\n        }),\n        listenOrNotOperator(listenToLangChange)\n      )\n      .subscribe(() => {\n        this.currentLang = this.langResolver.resolveLangBasedOnScope(this.path);\n        this.tpl === null ? this.simpleStrategy() : this.structuralStrategy(this.currentLang, this.inlineRead);\n        this.cdr.markForCheck();\n        this.initialized = true;\n      });\n  }\n\n  ngOnChanges(changes) {\n    // We need to support dynamic keys/params, so if this is not the first change CD cycle\n    // we need to run the function again in order to update the value\n    const notInit = Object.keys(changes).some(v => changes[v].firstChange === false);\n    notInit && this.simpleStrategy();\n  }\n\n  private simpleStrategy() {\n    this.detachLoader();\n    this.host.nativeElement.innerText = this.translocoService.translate(this.key, this.params, this.currentLang);\n  }\n\n  private structuralStrategy(lang: string, read: string | undefined) {\n    this.translationMemo = {};\n\n    if(this.view) {\n      // when the lang changes we need to change the reference so Angular will update the view\n      this.view.context['$implicit'] = this.getTranslateFn(lang, read);\n    } else {\n      this.detachLoader();\n      this.view = this.vcr.createEmbeddedView(this.tpl, {\n        $implicit: this.getTranslateFn(lang, read)\n      });\n    }\n  }\n\n  private getTranslateFn(lang: string, read: string | undefined): (key: string, params?: HashMap) => any {\n    return (key: string, params: HashMap) => {\n      const withRead = read ? `${read}.${key}` : key;\n      const withParams = params ? `${withRead}${JSON.stringify(params)}` : withRead;\n      if(this.translationMemo.hasOwnProperty(withParams)) {\n        return this.translationMemo[withParams].value;\n      }\n      this.translationMemo[withParams] = {\n        params,\n        value: this.translocoService.translate(withRead, params, lang)\n      };\n\n      return this.translationMemo[withParams].value;\n    };\n  }\n\n  private getLoadingTpl(): View {\n    return this.inlineTpl || this.providedLoadingTpl;\n  }\n\n  ngOnDestroy() {\n    this.subscription && this.subscription.unsubscribe();\n  }\n\n  private detachLoader() {\n    this.loaderTplHandler && this.loaderTplHandler.detachView();\n  }\n}\n","import { ChangeDetectorRef, Inject, OnDestroy, Optional, Pipe, PipeTransform } from '@angular/core';\nimport { TranslocoService } from './transloco.service';\nimport { HashMap, InlineLoader, ProviderScope } from './types';\nimport { switchMap } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { TRANSLOCO_SCOPE } from './transloco-scope';\nimport { TRANSLOCO_LANG } from './transloco-lang';\nimport { listenOrNotOperator, prependScope, shouldListenToLangChanges } from './shared';\nimport { LangResolver } from './lang-resolver';\nimport { ScopeResolver } from './scope-resolver';\nimport { hasInlineLoader } from './helpers';\n\n@Pipe({\n  name: 'transloco',\n  pure: false\n})\nexport class TranslocoPipe implements PipeTransform, OnDestroy {\n  private subscription: Subscription | null = null;\n  private lastValue: string | undefined;\n  private lastKey: string | undefined;\n  private listenToLangChange: boolean;\n  private path: string;\n  private langResolver = new LangResolver();\n  private scopeResolver = new ScopeResolver(this.translocoService);\n\n  constructor(\n    private translocoService: TranslocoService,\n    @Optional() @Inject(TRANSLOCO_SCOPE) private providerScope: string | ProviderScope | null,\n    @Optional() @Inject(TRANSLOCO_LANG) private providerLang: string | null,\n    private cdr: ChangeDetectorRef\n  ) {\n    this.listenToLangChange = shouldListenToLangChanges(this.translocoService, this.providerLang);\n  }\n\n  transform(key: string, params?: HashMap | undefined, inlineLang?: string | undefined): string {\n    if (!key) {\n      return key;\n    }\n\n    const keyName = params ? `${key}${JSON.stringify(params)}` : key;\n\n    if (keyName === this.lastKey) {\n      return this.lastValue;\n    }\n\n    this.lastKey = keyName;\n    this.subscription && this.subscription.unsubscribe();\n\n    this.subscription = this.translocoService.langChanges$\n      .pipe(\n        switchMap(activeLang => {\n          const lang = this.langResolver.resolve({\n            inline: inlineLang,\n            provider: this.providerLang,\n            active: activeLang\n          });\n\n          let scope = this.scopeResolver.resolve({ inline: undefined, provider: this.providerScope });\n          this.path = this.langResolver.resolveLangPath(lang, scope);\n\n          const inlineLoader: InlineLoader | null = hasInlineLoader(this.providerScope) ? prependScope(this.providerScope.loader, scope) : null;\n\n          return this.translocoService._loadDependencies(this.path, inlineLoader);\n        }),\n        listenOrNotOperator(this.listenToLangChange)\n      )\n      .subscribe(() => this.updateValue(key, params));\n\n    return this.lastValue;\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  private updateValue(key: string, params?: HashMap | undefined) {\n    const lang = this.langResolver.resolveLangBasedOnScope(this.path);\n    this.lastValue = this.translocoService.translate(key, params, lang);\n    this.cdr.markForCheck();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { TranslocoLoaderComponent } from './loader-component.component';\nimport { TranslocoDirective } from './transloco.directive';\nimport { DefaultTranspiler, TRANSLOCO_TRANSPILER } from './transloco.transpiler';\nimport { TranslocoPipe } from './transloco.pipe';\nimport { DefaultHandler, TRANSLOCO_MISSING_HANDLER } from './transloco-missing-handler';\nimport { DefaultInterceptor, TRANSLOCO_INTERCEPTOR } from './transloco.interceptor';\nimport { DefaultFallbackStrategy, TRANSLOCO_FALLBACK_STRATEGY } from './transloco-fallback-strategy';\nimport { TRANSLOCO_CONFIG } from './transloco.config';\n\nexport const defaultProviders = [\n  {\n    provide: TRANSLOCO_TRANSPILER,\n    useClass: DefaultTranspiler\n  },\n  {\n    provide: TRANSLOCO_MISSING_HANDLER,\n    useClass: DefaultHandler\n  },\n  {\n    provide: TRANSLOCO_INTERCEPTOR,\n    useClass: DefaultInterceptor\n  },\n  {\n    provide: TRANSLOCO_FALLBACK_STRATEGY,\n    useClass: DefaultFallbackStrategy,\n    deps: [TRANSLOCO_CONFIG]\n  }\n];\n\n@NgModule({\n  declarations: [TranslocoDirective, TranslocoPipe, TranslocoLoaderComponent],\n  providers: [defaultProviders],\n  exports: [TranslocoDirective, TranslocoPipe],\n  entryComponents: [TranslocoLoaderComponent]\n})\nexport class TranslocoModule {}\n","import { Inject, ModuleWithProviders, NgModule } from '@angular/core';\nimport { TRANSLOCO_LOADER, TranslocoLoader } from './transloco.loader';\nimport { HashMap, Translation } from './types';\nimport { Observable, of } from 'rxjs';\nimport { defaultProviders, TranslocoModule } from './transloco.module';\nimport { TRANSLOCO_CONFIG, TranslocoConfig } from './transloco.config';\n\nexport class TestingLoader implements TranslocoLoader {\n  constructor(@Inject('translocoLangs') private langs: HashMap<Translation>) {}\n\n  getTranslation(lang: string): Observable<Translation> | Promise<Translation> {\n    return of(this.langs[lang]);\n  }\n}\n\n@NgModule({\n  exports: [TranslocoModule]\n})\nexport class TranslocoTestingModule {\n  static withLangs(langs: HashMap<Translation>, config: Partial<TranslocoConfig> = {}): ModuleWithProviders {\n    return {\n      ngModule: TranslocoTestingModule,\n      providers: [\n        {\n          provide: 'translocoLangs',\n          useValue: langs\n        },\n        {\n          provide: TRANSLOCO_LOADER,\n          useClass: TestingLoader\n        },\n        defaultProviders,\n        {\n          provide: TRANSLOCO_CONFIG,\n          useValue: { prodMode: true, ...config }\n        }\n      ]\n    };\n  }\n}\n","import { isBrowser } from './helpers';\n\n/**\n * Returns the language code name from the browser, e.g. \"en\"\n */\nexport function getBrowserLang(): string | undefined {\n  if (isBrowser() === false) {\n    return undefined;\n  }\n\n  let browserLang = getBrowserCultureLang();\n  if (browserLang.indexOf('-') !== -1) {\n    browserLang = browserLang.split('-')[0];\n  }\n\n  if (browserLang.indexOf('_') !== -1) {\n    browserLang = browserLang.split('_')[0];\n  }\n\n  return browserLang;\n}\n\n/**\n * Returns the culture language code name from the browser, e.g. \"en-US\"\n */\nexport function getBrowserCultureLang(): string {\n  if (isBrowser() === false) {\n    return undefined;\n  }\n\n  const navigator = window.navigator as any;\n  let browserCultureLang = navigator.languages ? navigator.languages[0] : null;\n  browserCultureLang = browserCultureLang || navigator.language || navigator.browserLanguage || navigator.userLanguage;\n\n  return browserCultureLang;\n}\n"]}